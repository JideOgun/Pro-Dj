// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String?
  googleId  String?
  role      Role      @default(CLIENT)
  bookings  Booking[]
  comments  Comment[] @relation("UserComments")
  createdAt DateTime  @default(now())
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventType String
  eventDate DateTime
  message   String
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  bookingType String?
  packageKey String?
  quotedPriceCents Int?
  details Json?
}

model Mix {
  id          String    @id @default(uuid())
  title       String
  description String
  url         String
  tags        String[]
  uploadedAt  DateTime  @default(now())
  comments    Comment[]
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  coverImage String
  createdAt  DateTime  @default(now())
  comments   Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  //relations
  userId String
  user   User    @relation("UserComments", fields: [userId], references: [id])
  mixId  String?
  mix    Mix?    @relation(fields: [mixId], references: [id])
  postId String?
  post   Post?   @relation(fields: [postId], references: [id])
}

model Pricing {
  id         String   @id @default(uuid())
  type       String   // "Wedding" | "Club" | ...
  key        String   // "silver" | "gold" | "2hr" | ...
  label      String   // UI label shown in the dropdown
  priceCents Int
  isActive   Boolean  @default(true)
  sortOrder  Int      @default(0)

  // v2 (multi-DJ): add this later
  // djId     String?
  // dj       DjProfile? @relation(fields: [djId], references: [id])

  @@unique([type, key]) // one package per type+key
  @@index([type, sortOrder])
}


enum Role {
  ADMIN
  DJ
  CLIENT
}
