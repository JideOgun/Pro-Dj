generator client {
provider = "prisma-client-js"
output = "../app/generated/prisma"
binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
email String @unique
name String?
password String?
googleId String?
role Role @default(CLIENT)
createdAt DateTime @default(now())
status UserStatus @default(ACTIVE)
suspendedAt DateTime?
suspendedBy String?
suspensionReason String?
updatedAt DateTime @updatedAt
bio String?
dateOfBirth DateTime?
location String?
phone String?
profileImage String?
socialLinks Json?
website String?
agreedToPrivacy Boolean @default(false)
agreedToTerms Boolean @default(false)
privacyAgreedAt DateTime?
privacyVersion String?
termsAgreedAt DateTime?
termsVersion String?
agreedToContractorTerms Boolean @default(false)
  agreedToServiceProviderTerms Boolean @default(false)
  contractorTermsAgreedAt DateTime?
  contractorTermsVersion String?
  serviceProviderTermsAgreedAt DateTime?
  serviceProviderTermsVersion String?
  w9Submitted Boolean @default(false)
  w9SubmittedAt DateTime?
  freeUploadsUsed Int @default(0)
  maxFreeUploads Int @default(1)
  resetToken String?
  resetTokenExpiry DateTime?
bookings Booking[]
comments Comment[] @relation("UserComments")
commentDislikes CommentDislike[]
commentLikes CommentLike[]
djProfile DjProfile?
followers Follow[] @relation("UserFollowers")
following Follow[] @relation("UserFollowing")
mixLikes MixLike[]
notifications Notification[] @relation("UserNotifications")
reposts Repost[]
reviews Review[] @relation("UserReviews")
securityClearance SecurityClearance?
subscription Subscription?
userMedia UserMedia[]
promoCodeRedemptions PromoCodeRedemption[]
}

model Booking {
id String @id @default(uuid())
userId String
eventType String
eventDate DateTime
message String
isPaid Boolean @default(false)
createdAt DateTime @default(now())
details Json?
quotedPriceCents Int?
checkoutSessionId String?
paidAt DateTime?
status BookingStatus @default(PENDING)
djId String?
endTime DateTime
startTime DateTime
cancellationReason String?
cancelledAt DateTime?
cancelledBy String?
refundAmount Int?
refundId String?
refundedAt DateTime?
totalAmount Int?
dj DjProfile? @relation(fields: [djId], references: [id])
user User @relation(fields: [userId], references: [id])
recovery BookingRecovery[] @relation("OriginalBooking")
review Review?

@@index([status])
@@index([djId])
}

model Post {
id String @id @default(uuid())
title String
content String
coverImage String
createdAt DateTime @default(now())
comments Comment[]
}

model Comment {
id String @id @default(uuid())
content String
createdAt DateTime @default(now())
userId String
mixId String?
postId String?
commentType String
deletedAt DateTime?
dislikeCount Int @default(0)
flaggedReason String?
isDeleted Boolean @default(false)
isEdited Boolean @default(false)
isFlagged Boolean @default(false)
likeCount Int @default(0)
parentId String?
photoId String?
threadDepth Int @default(0)
updatedAt DateTime @updatedAt
videoId String?
mix DjMix? @relation(fields: [mixId], references: [id])
parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
replies Comment[] @relation("CommentReplies")
photo EventPhoto? @relation(fields: [photoId], references: [id])
post Post? @relation(fields: [postId], references: [id])
user User @relation("UserComments", fields: [userId], references: [id])
video DjYouTubeVideo? @relation(fields: [videoId], references: [id])
dislikes CommentDislike[]
likes CommentLike[]

@@index([commentType, mixId])
@@index([commentType, videoId])
@@index([commentType, postId])
@@index([commentType, photoId])
@@index([parentId])
@@index([threadDepth])
@@index([createdAt])
}

model CommentLike {
id String @id @default(uuid())
commentId String
userId String
createdAt DateTime @default(now())
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model CommentDislike {
id String @id @default(uuid())
commentId String
userId String
createdAt DateTime @default(now())
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model Pricing {
id String @id @default(uuid())
type String
key String
label String
priceCents Int
isActive Boolean @default(true)
sortOrder Int @default(0)
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

@@unique([type, key, djId])
@@index([type, sortOrder])
@@index([djId])
}

model DjProfile {
id String @id @default(uuid())
userId String @unique
stageName String @unique
bio String?
genres String[]
experience Int
location String?
travelRadius Int?
portfolio String[]
totalBookings Int @default(0)
rating Float @default(0)
reviewCount Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
availability String?
customGenres String?
equipment String?
languages String[]
socialLinks Json?
specialties String?
isFeatured Boolean @default(false)
eventsOffered String[]
isAcceptingBookings Boolean @default(true)
isApprovedByAdmin Boolean @default(false)
stripeCustomerId String? // Stripe customer ID for subscription management
bookings Booking[]
recoverySuggestions BookingRecovery[] @relation("SuggestedDj")
djAddons DjAddon[]
djEventPricing DjEventPricing[]
mixes DjMix[]
user User @relation(fields: [userId], references: [id])
youtubeVideos DjYouTubeVideo[]
eventPhotos EventPhoto[]
pricing Pricing[]
reviews Review[]
}

model Review {
id String @id @default(uuid())
bookingId String @unique
djId String
clientId String
rating Int
comment String?
createdAt DateTime @default(now())
booking Booking @relation(fields: [bookingId], references: [id])
client User @relation("UserReviews", fields: [clientId], references: [id])
dj DjProfile @relation(fields: [djId], references: [id])
}

model DjAddon {
id String @id @default(uuid())
djId String
addonKey String
label String
description String?
priceCents Int
isActive Boolean @default(true)
isCustom Boolean @default(false)
customCategory String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dj DjProfile @relation(fields: [djId], references: [id])

@@unique([djId, addonKey])
@@index([djId, isActive])
}

model DjEventPricing {
id String @id @default(uuid())
djId String
eventType String
hourlyRateCents Int
description String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dj DjProfile @relation(fields: [djId], references: [id])

@@unique([djId, eventType])
@@index([djId])
}

model Notification {
id String @id @default(uuid())
userId String
type String
title String
message String
data Json?
isRead Boolean @default(false)
actionUrl String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation("UserNotifications", fields: [userId], references: [id])

@@index([userId, isRead])
@@index([createdAt])
}

model BookingRecovery {
id String @id @default(uuid())
originalBookingId String
recoveryType String
suggestedDjId String?
status String
clientResponse String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
originalBooking Booking @relation("OriginalBooking", fields: [originalBookingId], references: [id])
suggestedDj DjProfile? @relation("SuggestedDj", fields: [suggestedDjId], references: [id])
}

model PaymentMetric {
id String @id @default(uuid())
bookingId String
type String
success Boolean
amount Int
metadata Json?
timestamp DateTime @default(now())

@@index([type, timestamp])
@@index([bookingId])
}

model PaymentAlert {
id String @id @default(uuid())
type String
data Json
timestamp DateTime @default(now())
isResolved Boolean @default(false)
resolvedAt DateTime?
resolvedBy String?

@@index([type, isResolved])
@@index([timestamp])
}

model UserMedia {
id String @id @default(uuid())
userId String
type String
url String
filename String
originalName String
mimeType String
size Int
altText String?
description String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id])

@@index([userId, type])
}

model EventPhoto {
id String @id @default(uuid())
djId String
title String
description String?
url String
filename String
originalName String
mimeType String
size Int
altText String?
eventName String?
eventDate DateTime?
eventType String?
venue String?
location String?
tags String[]
isFeatured Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])

@@index([djId, isFeatured])
@@index([eventType])
}

model DjMix {
id String @id @default(uuid())
djId String
title String
description String?
tags String[]
isPublic Boolean @default(false)
isFeatured Boolean @default(false)
fileName String
originalName String
fileSize Int
duration Int?
bitrate Int?
sampleRate Int?
s3Key String
cloudFrontUrl String?
localUrl String?
uploadStatus UploadStatus @default(PENDING)
uploadProgress Int @default(0)
uploadedAt DateTime?
uploadError String?
playCount Int @default(0)
downloadCount Int @default(0)
lastPlayedAt DateTime?
mimeType String
format String?
quality String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
albumArtS3Key String?
albumArtUrl String?
likeCount Int @default(0)
genres String[]
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])
likes MixLike[]
reposts Repost[]

@@index([djId, isPublic])
@@index([genres])
@@index([uploadStatus])
@@index([isFeatured])
}

model MixLike {
id String @id @default(uuid())
mixId String
userId String
createdAt DateTime @default(now())
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([mixId, userId])
@@index([mixId])
@@index([userId])
}

model DjYouTubeVideo {
id String @id @default(uuid())
djId String
title String
description String?
youtubeUrl String
youtubeId String
thumbnailUrl String?
duration String?
eventType String?
eventDate DateTime?
venue String?
location String?
tags String[]
isFeatured Boolean @default(false)
isPublic Boolean @default(true)
viewCount Int @default(0)
likeCount Int @default(0)
sortOrder Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])

@@index([djId, isPublic])
@@index([eventType])
@@index([isFeatured])
@@index([sortOrder])
}

model Follow {
id String @id @default(uuid())
followerId String
followingId String
createdAt DateTime @default(now())
follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

@@unique([followerId, followingId])
@@index([followerId])
@@index([followingId])
@@index([createdAt])
}

model Repost {
id String @id @default(uuid())
userId String
mixId String
createdAt DateTime @default(now())
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId, mixId])
@@index([userId])
@@index([mixId])
@@index([createdAt])
}

model SecurityClearance {
id String @id @default(uuid())
userId String @unique
encryptedTaxId String?
taxIdLastFour String?
taxIdType String?
businessName String?
businessAddress String?
businessPhone String?
isCorporation Boolean @default(false)
isSoleProprietor Boolean @default(true)
businessType String?
lastAccessedAt DateTime?
lastAccessedBy String?
accessCount Int @default(0)
ipAddress String?
isVerified Boolean @default(false)
verifiedAt DateTime?
verifiedBy String?
dataRetentionDate DateTime?
isRetentionSuspended Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId])
@@index([isVerified])
@@index([dataRetentionDate])
}

model Subscription {
id String @id @default(uuid())
userId String @unique
stripeSubscriptionId String @unique
stripeCustomerId String
stripePriceId String
planType SubscriptionTier
status SubscriptionStatus @default(ACTIVE)
currentPeriodStart DateTime
currentPeriodEnd DateTime
amountCents Int
currency String @default("usd")
interval String @default("month")
intervalCount Int @default(1)
trialStart DateTime?
trialEnd DateTime?
isInTrial Boolean @default(false)
cancelAtPeriodEnd Boolean @default(false)
cancelledAt DateTime?
cancelReason String?
lastPaymentDate DateTime?
nextPaymentDate DateTime?
paymentMethodId String?
platformFeePercentage Int @default(10)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
usage SubscriptionUsage[]
promoCodeRedemptions PromoCodeRedemption[]

@@index([userId])
@@index([stripeSubscriptionId])
@@index([stripeCustomerId])
@@index([status])
@@index([currentPeriodEnd])
}

model SubscriptionPlan {
id String @id @default(uuid())
name String @unique
displayName String
description String?
priceCents Int
currency String @default("usd")
interval String @default("month")
intervalCount Int @default(1)
features Json?
isActive Boolean @default(true)
isDefault Boolean @default(false)
stripePriceId String?
stripeProductId String?
trialDays Int @default(30)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([name])
@@index([isActive])
@@index([stripePriceId])
}

model SubscriptionUsage {
id String @id @default(uuid())
subscriptionId String
bookingsCount Int @default(0)
revenueGenerated Int @default(0)
platformFeesCollected Int @default(0)
periodStart DateTime
periodEnd DateTime
isCurrentPeriod Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

@@index([subscriptionId])
@@index([periodStart])
@@index([periodEnd])
@@index([isCurrentPeriod])
}

model PromoCodeRedemption {
id String @id @default(uuid())
userId String
promoCode String
redeemedAt DateTime @default(now())
subscriptionId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

@@unique([userId, promoCode])
@@index([userId])
@@index([promoCode])
@@index([subscriptionId])
}

enum Role {
ADMIN
CLIENT
DJ
}

enum BookingStatus {
PENDING
ACCEPTED
DECLINED
CONFIRMED
CANCELLED
}

enum UserStatus {
ACTIVE
SUSPENDED
PENDING
}

enum SubscriptionStatus {
ACTIVE
CANCELLED
PAST_DUE
UNPAID
TRIAL
}

enum SubscriptionTier {
DJ_BASIC
DJ_PRO
DJ_PREMIUM
}

enum UploadStatus {
PENDING
UPLOADING
COMPLETED
FAILED
CANCELLED
}
