// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
provider = "prisma-client-js"
output = "../app/generated/prisma"
binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
email String @unique
name String?
password String?
googleId String?
role Role @default(CLIENT)
status UserStatus @default(ACTIVE)
suspendedAt DateTime?
suspendedBy String? // Admin ID who suspended the user
suspensionReason String?

// Profile Information
profileImage String? // URL to profile picture
phone String?
location String?
bio String?
dateOfBirth DateTime?
website String?

// Social Media Links
socialLinks Json? // {instagram, twitter, facebook, linkedin, tiktok}

bookings Booking[]
comments Comment[] @relation("UserComments")
commentLikes CommentLike[]
commentDislikes CommentDislike[]
mixLikes MixLike[] // New relation for mix likes

// Follow System
followers Follow[] @relation("UserFollowers")
following Follow[] @relation("UserFollowing")
reposts Repost[] // User's reposts

// DJ Profile relation
djProfile DjProfile?

// Reviews relation
reviews Review[] @relation("UserReviews")

// Notifications relation
notifications Notification[] @relation("UserNotifications")

// User Media
userMedia UserMedia[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Booking {
id String @id @default(uuid())
userId String
user User @relation(fields: [userId], references: [id])

// DJ assignment
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

eventType String
eventDate DateTime
startTime DateTime // Start time of the event
endTime DateTime // End time of the event
message String
isPaid Boolean @default(false)
createdAt DateTime @default(now())
bookingType String?
packageKey String?
quotedPriceCents Int?
details Json?
status BookingStatus @default(PENDING)
checkoutSessionId String? // Stripe session used to payment
paidAt DateTime?

// Cancellation and refund fields
cancellationReason String?
cancelledAt DateTime?
cancelledBy String? // ID of admin who cancelled
refundId String? // Stripe refund ID
refundedAt DateTime?
refundAmount Int? // Amount refunded in cents
totalAmount Int? // Total booking amount in cents

// Review relation
review Review?

// Recovery relation
recovery BookingRecovery[] @relation("OriginalBooking")

@@index([status])
@@index([djId])
}

model Post {
id String @id @default(uuid())
title String
content String
coverImage String
createdAt DateTime @default(now())
comments Comment[]
}

model Comment {
id String @id @default(uuid())
content String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Comment threading
parentId String? // For reply comments
parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
replies Comment[] @relation("CommentReplies")
threadDepth Int @default(0) // How deep in the thread (0 = top level)

// Comment type and relations
commentType String // "mix", "video", "post", "photo"
mixId String?
mix DjMix? @relation(fields: [mixId], references: [id])
videoId String?
video DjYouTubeVideo? @relation(fields: [videoId], references: [id])
postId String?
post Post? @relation(fields: [postId], references: [id])
photoId String?
photo EventPhoto? @relation(fields: [photoId], references: [id])

// User relation
userId String
user User @relation("UserComments", fields: [userId], references: [id])

// Moderation and engagement
isEdited Boolean @default(false)
isDeleted Boolean @default(false)
deletedAt DateTime?
likeCount Int @default(0)
dislikeCount Int @default(0)
isFlagged Boolean @default(false)
flaggedReason String?

// Likes/Dislikes tracking
likes CommentLike[]
dislikes CommentDislike[]

@@index([commentType, mixId])
@@index([commentType, videoId])
@@index([commentType, postId])
@@index([commentType, photoId])
@@index([parentId])
@@index([threadDepth])
@@index([createdAt])
}

model CommentLike {
id String @id @default(uuid())
commentId String
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model CommentDislike {
id String @id @default(uuid())
commentId String
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model Pricing {
id String @id @default(uuid())
type String // "Wedding" | "Club" | ...
key String // "silver" | "gold" | "2hr" | ...
label String // UI label shown in the dropdown
priceCents Int // Base price per hour in cents
isActive Boolean @default(true)
sortOrder Int @default(0)

// DJ assignment
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

@@unique([type, key, djId]) // one package per type+key+dj (null djId = platform default)
@@index([type, sortOrder])
@@index([djId])
}

enum Role {
ADMIN
DJ
CLIENT
}

model DjProfile {
id String @id @default(uuid())
userId String @unique
user User @relation(fields: [userId], references: [id])

// DJ-specific fields
stageName String @unique
bio String?
genres String[] // ["Afrobeats", "Amapiano", "Hip-Hop"]
customGenres String? // additional genres not in the main list
experience Int // years of experience
location String?
travelRadius Int? // miles willing to travel

// Specialties & Skills
specialties String? // unique skills and specialties
equipment String? // equipment and setup details
languages String[] // languages spoken
availability String? // availability schedule and preferences

// Social Media & Links
socialLinks Json? // {instagram, tiktok, soundcloud, youtube, twitter, facebook, linkedin, website}

// Media
profileImage String?
portfolio String[] // array of image URLs
eventPhotos EventPhoto[] // enhanced event photos with metadata

// Pricing
basePriceCents Int? // base hourly rate

// Availability
isActive Boolean @default(true)
isVerified Boolean @default(false)
isFeatured Boolean @default(false) // For featuring DJs on homepage

// Stats
totalBookings Int @default(0)
rating Float @default(0)
reviewCount Int @default(0)

// Relations
bookings Booking[]
pricing Pricing[]
reviews Review[]
recoverySuggestions BookingRecovery[] @relation("SuggestedDj")
mixes DjMix[]
youtubeVideos DjYouTubeVideo[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Review {
id String @id @default(uuid())
bookingId String @unique
booking Booking @relation(fields: [bookingId], references: [id])

djId String
dj DjProfile @relation(fields: [djId], references: [id])

clientId String
client User @relation("UserReviews", fields: [clientId], references: [id])

rating Int // 1-5 stars
comment String?

createdAt DateTime @default(now())
}

enum BookingStatus {
PENDING
ACCEPTED // waiting on payment
DECLINED
CONFIRMED // paid
CANCELLED
}

enum UserStatus {
ACTIVE
SUSPENDED
PENDING
}

model Notification {
id String @id @default(uuid())
userId String
user User @relation("UserNotifications", fields: [userId], references: [id])

type String // "BOOKING_DECLINED", "DJ_CANCELLED", "RECOVERY_SUGGESTION", etc.
title String
message String
data Json? // additional data like suggested DJs, recovery options
isRead Boolean @default(false)
actionUrl String? // URL to take action (e.g., book new DJ)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([userId, isRead])
@@index([createdAt])
}

model BookingRecovery {
id String @id @default(uuid())
originalBookingId String
originalBooking Booking @relation("OriginalBooking", fields: [originalBookingId], references: [id])

recoveryType String // "EXTEND_DJ", "NEW_DJ", "REFUND"
suggestedDjId String?
suggestedDj DjProfile? @relation("SuggestedDj", fields: [suggestedDjId], references: [id])

status String // "PENDING", "ACCEPTED", "DECLINED"
clientResponse String? // client's response to recovery suggestion

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model UserMedia {
id String @id @default(uuid())
userId String
user User @relation(fields: [userId], references: [id])

type String // "PROFILE_PICTURE", "EVENT_PHOTO", "PORTFOLIO", "DOCUMENT"
url String
filename String
originalName String
mimeType String
size Int // file size in bytes
altText String? // for accessibility
description String?

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([userId, type])
}

model EventPhoto {
id String @id @default(uuid())
djId String
dj DjProfile @relation(fields: [djId], references: [id])

title String
description String?
url String
filename String
originalName String
mimeType String
size Int // file size in bytes
altText String? // for accessibility

// Event Details
eventName String?
eventDate DateTime?
eventType String?
venue String?
location String?

// Tags and Categories
tags String[] // ["wedding", "club", "birthday", "corporate"]
isFeatured Boolean @default(false) // for portfolio highlights

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Comments
comments Comment[]

@@index([djId, isFeatured])
@@index([eventType])
}

model DjMix {
id String @id @default(uuid())
djId String
dj DjProfile @relation(fields: [djId], references: [id])

// Mix Information
title String
description String?
genres String[] // ["Afrobeats", "Amapiano", "Hip-Hop"] - Multiple genres
tags String[] // ["afrobeats", "amapiano", "hip-hop", "house"]
isPublic Boolean @default(false)
isFeatured Boolean @default(false)

// File Information
fileName String
originalName String
fileSize Int // file size in bytes
duration Int? // duration in seconds
bitrate Int? // bitrate in kbps
sampleRate Int? // sample rate in Hz

// Storage Information
s3Key String // S3 object key
cloudFrontUrl String? // CDN URL for fast delivery
localUrl String? // Local URL for development/testing

// Album Art
albumArtS3Key String? // S3 key for album art image
albumArtUrl String? // URL to album art image

// Upload Information
uploadStatus UploadStatus @default(PENDING)
uploadProgress Int @default(0) // 0-100
uploadedAt DateTime?
uploadError String?

// Playback Statistics
playCount Int @default(0)
downloadCount Int @default(0)
likeCount Int @default(0) // New field for like count
lastPlayedAt DateTime?

// Metadata
mimeType String
format String? // "mp3", "wav", "ogg"
quality String? // "high", "medium", "low"

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Comments and Likes
comments Comment[]
likes MixLike[] // New relation for mix likes
reposts Repost[] // Reposts of this mix

@@index([djId, isPublic])
@@index([genres])
@@index([uploadStatus])
@@index([isFeatured])
}

model MixLike {
id String @id @default(uuid())
mixId String
userId String
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())

@@unique([mixId, userId]) // Prevent duplicate likes
@@index([mixId])
@@index([userId])
}

model DjYouTubeVideo {
id String @id @default(uuid())
djId String
dj DjProfile @relation(fields: [djId], references: [id])

// Video Information
title String
description String?
youtubeUrl String // Full YouTube URL
youtubeId String // Extracted YouTube video ID
thumbnailUrl String? // YouTube thumbnail URL
duration String? // Video duration (e.g., "3:45")

// Video Details
eventType String? // "wedding", "club", "birthday", "corporate", "live performance"
eventDate DateTime? // When the event/video was recorded
venue String? // Venue where video was recorded
location String?

// Tags and Categories
tags String[] // ["afrobeats", "amapiano", "live", "wedding", "club"]
isFeatured Boolean @default(false) // For portfolio highlights
isPublic Boolean @default(true)

// Statistics (optional, can be updated manually)
viewCount Int @default(0)
likeCount Int @default(0)

// Ordering
sortOrder Int @default(0) // For manual ordering

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Comments
comments Comment[]

@@index([djId, isPublic])
@@index([eventType])
@@index([isFeatured])
@@index([sortOrder])
}

enum UploadStatus {
PENDING
UPLOADING
COMPLETED
FAILED
CANCELLED
}

// Follow System
model Follow {
id String @id @default(uuid())
followerId String // User who is following
followingId String // User being followed
follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())

@@unique([followerId, followingId]) // Prevent duplicate follows
@@index([followerId])
@@index([followingId])
@@index([createdAt])
}

// Repost System
model Repost {
id String @id @default(uuid())
userId String // User who reposted
mixId String // Mix being reposted
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())

@@unique([userId, mixId]) // Prevent duplicate reposts
@@index([userId])
@@index([mixId])
@@index([createdAt])
}
