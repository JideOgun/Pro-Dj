// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
provider = "prisma-client-js"
output = "../app/generated/prisma"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
email String @unique
name String?
password String?
googleId String?
role Role @default(CLIENT)
status UserStatus @default(ACTIVE)
suspendedAt DateTime?
suspendedBy String? // Admin ID who suspended the user
suspensionReason String?
bookings Booking[]
comments Comment[] @relation("UserComments")

// DJ Profile relation
djProfile DjProfile?

// Reviews relation
reviews Review[] @relation("UserReviews")

// Notifications relation
notifications Notification[] @relation("UserNotifications")

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Booking {
id String @id @default(uuid())
userId String
user User @relation(fields: [userId], references: [id])

// DJ assignment
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

eventType String
eventDate DateTime
startTime DateTime // Start time of the event
endTime DateTime // End time of the event
message String
isPaid Boolean @default(false)
createdAt DateTime @default(now())
bookingType String?
packageKey String?
quotedPriceCents Int?
details Json?
status BookingStatus @default(PENDING)
checkoutSessionId String? // Stripe session used to payment
paidAt DateTime?

// Cancellation and refund fields
cancellationReason String?
cancelledAt DateTime?
cancelledBy String? // ID of admin who cancelled
refundId String? // Stripe refund ID
refundedAt DateTime?
refundAmount Int? // Amount refunded in cents
totalAmount Int? // Total booking amount in cents

// Review relation
review Review?

// Recovery relation
recovery BookingRecovery[] @relation("OriginalBooking")

@@index([status])
@@index([djId])
}

model Mix {
id String @id @default(uuid())
title String
description String
url String
tags String[]
uploadedAt DateTime @default(now())
comments Comment[]
}

model Post {
id String @id @default(uuid())
title String
content String
coverImage String
createdAt DateTime @default(now())
comments Comment[]
}

model Comment {
id String @id @default(uuid())
content String
createdAt DateTime @default(now())

//relations
userId String
user User @relation("UserComments", fields: [userId], references: [id])
mixId String?
mix Mix? @relation(fields: [mixId], references: [id])
postId String?
post Post? @relation(fields: [postId], references: [id])
}

model Pricing {
id String @id @default(uuid())
type String // "Wedding" | "Club" | ...
key String // "silver" | "gold" | "2hr" | ...
label String // UI label shown in the dropdown
priceCents Int // Base price per hour in cents
isActive Boolean @default(true)
sortOrder Int @default(0)

// DJ assignment
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

@@unique([type, key, djId]) // one package per type+key+dj (null djId = platform default)
@@index([type, sortOrder])
@@index([djId])
}

enum Role {
ADMIN
DJ
CLIENT
}

model DjProfile {
id String @id @default(uuid())
userId String @unique
user User @relation(fields: [userId], references: [id])

// DJ-specific fields
stageName String
bio String?
genres String[] // ["Afrobeats", "Amapiano", "Hip-Hop"]
customGenres String? // additional genres not in the main list
experience Int // years of experience
location String?
travelRadius Int? // miles willing to travel

// Specialties & Skills
specialties String? // unique skills and specialties
equipment String? // equipment and setup details
languages String[] // languages spoken
availability String? // availability schedule and preferences

// Social Media & Links
socialLinks Json? // {instagram, youtube, soundcloud, website}

// Media
profileImage String?
portfolio String[] // array of image URLs

// Pricing
basePriceCents Int? // base hourly rate

// Availability
isActive Boolean @default(true)
isVerified Boolean @default(false)

// Stats
totalBookings Int @default(0)
rating Float @default(0)
reviewCount Int @default(0)

// Relations
bookings Booking[]
pricing Pricing[]
reviews Review[]
recoverySuggestions BookingRecovery[] @relation("SuggestedDj")

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Review {
id String @id @default(uuid())
bookingId String @unique
booking Booking @relation(fields: [bookingId], references: [id])

djId String
dj DjProfile @relation(fields: [djId], references: [id])

clientId String
client User @relation("UserReviews", fields: [clientId], references: [id])

rating Int // 1-5 stars
comment String?

createdAt DateTime @default(now())
}

enum BookingStatus {
PENDING
ACCEPTED // waiting on payment
DECLINED
CONFIRMED // paid
CANCELLED
}

enum UserStatus {
ACTIVE
SUSPENDED
PENDING
}

model Notification {
id String @id @default(uuid())
userId String
user User @relation("UserNotifications", fields: [userId], references: [id])

type String // "BOOKING_DECLINED", "DJ_CANCELLED", "RECOVERY_SUGGESTION", etc.
title String
message String
data Json? // additional data like suggested DJs, recovery options
isRead Boolean @default(false)
actionUrl String? // URL to take action (e.g., book new DJ)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([userId, isRead])
@@index([createdAt])
}

model BookingRecovery {
id String @id @default(uuid())
originalBookingId String
originalBooking Booking @relation("OriginalBooking", fields: [originalBookingId], references: [id])

recoveryType String // "EXTEND_DJ", "NEW_DJ", "REFUND"
suggestedDjId String?
suggestedDj DjProfile? @relation("SuggestedDj", fields: [suggestedDjId], references: [id])

status String // "PENDING", "ACCEPTED", "DECLINED"
clientResponse String? // client's response to recovery suggestion

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}
