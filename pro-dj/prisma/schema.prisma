generator client {
provider = "prisma-client-js"
output = "../app/generated/prisma"
binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
email String @unique
name String?
password String?
googleId String?
role Role @default(CLIENT)
createdAt DateTime @default(now())
status UserStatus @default(ACTIVE)
suspendedAt DateTime?
suspendedBy String?
suspensionReason String?
updatedAt DateTime @updatedAt
bio String?
dateOfBirth DateTime?
location String?
phone String?
profileImage String?
socialLinks Json?
website String?
agreedToPrivacy Boolean @default(false)
agreedToTerms Boolean @default(false)
privacyAgreedAt DateTime?
privacyVersion String?
termsAgreedAt DateTime?
termsVersion String?
agreedToContractorTerms Boolean @default(false)
agreedToServiceProviderTerms Boolean @default(false)
contractorTermsAgreedAt DateTime?
contractorTermsVersion String?
serviceProviderTermsAgreedAt DateTime?
serviceProviderTermsVersion String?
w9Submitted Boolean @default(false)
w9SubmittedAt DateTime?
freeUploadsUsed Int @default(0)
maxFreeUploads Int @default(1)
resetToken String?
resetTokenExpiry DateTime?
bookings Booking[]
adminApprovedBookings Booking[] @relation("AdminApprovedBookings")
comments Comment[] @relation("UserComments")
commentDislikes CommentDislike[]
commentLikes CommentLike[]
djProfile DjProfile?
followers Follow[] @relation("UserFollowers")
following Follow[] @relation("UserFollowing")
mixLikes MixLike[]
notifications Notification[] @relation("UserNotifications")
reposts Repost[]
reviews Review[] @relation("UserReviews")
securityClearance SecurityClearance?

userMedia UserMedia[]

adminBookingActions AdminBookingAction[]
clientPreferences ClientDjPreference[] @relation("ClientPreferences")
}

model Booking {
id String @id @default(uuid())
userId String
eventType String
eventDate DateTime
message String
isPaid Boolean @default(false)
createdAt DateTime @default(now())
details Json?
quotedPriceCents Int?
checkoutSessionId String?
paidAt DateTime?
status BookingStatus @default(PENDING_ADMIN_REVIEW)
djId String?
endTime DateTime
startTime DateTime
cancellationReason String?
cancelledAt DateTime?
cancelledBy String?
refundAmount Int?
refundId String?
refundedAt DateTime?
totalAmount Int?
// Escrow and fee fields
platformFeeCents Int? // 70% platform fee for subcontractor model
escrowStatus EscrowStatus @default(PENDING)
clientConfirmed Boolean @default(false)
djConfirmed Boolean @default(false)
eventCompletedAt DateTime?
payoutStatus PayoutStatus @default(PENDING)
payoutAmountCents Int? // Amount DJ receives after fee (30%)
payoutId String? // Stripe transfer ID
payoutAt DateTime?
disputeStatus DisputeStatus @default(NONE)
disputeReason String?
disputeCreatedAt DateTime?
disputeResolvedAt DateTime?
// NEW: Admin-controlled booking fields
preferredDjId String? // Client's DJ preference (optional)
adminAssignedDjId String? // Admin's actual DJ assignment
adminNotes String? // Admin reasoning for assignment
adminApprovedAt DateTime? // When admin approved booking
adminApprovedBy String? // Which admin approved
proDjServicePricingId String? // Links to standardized pricing
selectedAddons String[] // Array of ProDjAddon IDs
proDjAddons ProDjAddon[] // Many-to-many relation with add-ons
// Relations
dj DjProfile? @relation(fields: [djId], references: [id])
preferredDj DjProfile? @relation("PreferredDjBookings", fields: [preferredDjId], references: [id])
adminAssignedDj DjProfile? @relation("AdminAssignedBookings", fields: [adminAssignedDjId], references: [id])
adminApprover User? @relation("AdminApprovedBookings", fields: [adminApprovedBy], references: [id])
proDjServicePricing ProDjServicePricing? @relation(fields: [proDjServicePricingId], references: [id])
user User @relation(fields: [userId], references: [id])
recovery BookingRecovery[] @relation("OriginalBooking")
review Review?
equipmentAssignments EquipmentAssignment[]
performanceMetrics DjPerformanceMetric[]
adminActions AdminBookingAction[]

@@index([status])
@@index([djId])
@@index([preferredDjId])
@@index([adminAssignedDjId])
@@index([escrowStatus])
@@index([payoutStatus])
@@index([adminApprovedBy])
}

model Post {
id String @id @default(uuid())
title String
content String
coverImage String
createdAt DateTime @default(now())
comments Comment[]
}

model Comment {
id String @id @default(uuid())
content String
createdAt DateTime @default(now())
userId String
mixId String?
postId String?
commentType String
deletedAt DateTime?
dislikeCount Int @default(0)
flaggedReason String?
isDeleted Boolean @default(false)
isEdited Boolean @default(false)
isFlagged Boolean @default(false)
likeCount Int @default(0)
parentId String?
photoId String?
threadDepth Int @default(0)
updatedAt DateTime @updatedAt
videoId String?
mix DjMix? @relation(fields: [mixId], references: [id])
parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
replies Comment[] @relation("CommentReplies")
photo EventPhoto? @relation(fields: [photoId], references: [id])
post Post? @relation(fields: [postId], references: [id])
user User @relation("UserComments", fields: [userId], references: [id])
video DjYouTubeVideo? @relation(fields: [videoId], references: [id])
dislikes CommentDislike[]
likes CommentLike[]

@@index([commentType, mixId])
@@index([commentType, videoId])
@@index([commentType, postId])
@@index([commentType, photoId])
@@index([parentId])
@@index([threadDepth])
@@index([createdAt])
}

model CommentLike {
id String @id @default(uuid())
commentId String
userId String
createdAt DateTime @default(now())
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model CommentDislike {
id String @id @default(uuid())
commentId String
userId String
createdAt DateTime @default(now())
comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([commentId, userId])
@@index([commentId])
@@index([userId])
}

model Pricing {
id String @id @default(uuid())
type String
key String
label String
priceCents Int
isActive Boolean @default(true)
sortOrder Int @default(0)
djId String?
dj DjProfile? @relation(fields: [djId], references: [id])

@@unique([type, key, djId])
@@index([type, sortOrder])
@@index([djId])
}

model ProDjServicePricing {
id String @id @default(uuid())
eventType String
packageType String @default("BASIC") // "BASIC", "PREMIUM", "CUSTOM"
packageName String?
basePricePerHour Int? // For backward compatibility
basePriceCents Int? // Package-based pricing
regionMultiplier Float @default(1.0)
minimumHours Int @default(4)
durationHours Int? // Package duration
description String?
includes String[] // Array of included services
isActive Boolean @default(true)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
bookings Booking[]
proDjAddons ProDjAddon[] // Many-to-many relation with add-ons

@@unique([eventType, packageType])
@@index([eventType, isActive])
}

model ProDjAddon {
id String @id @default(uuid())
name String
description String
priceFixed Int?
pricePerHour Int?
category String
isActive Boolean @default(true)
requiresSpecialEquipment Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Relations
bookings Booking[]
proDjServicePricing ProDjServicePricing[] // Many-to-many relation with pricing packages

@@index([category, isActive])
}

model DjProfile {
id String @id @default(uuid())
userId String @unique
stageName String @unique
bio String?
genres String[]
experience Int
location String?
travelRadius Int?
portfolio String[]
totalBookings Int @default(0)
rating Float @default(0)
reviewCount Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
customGenres String?
equipment String?
languages String[]
socialLinks Json?
specialties String?
isFeatured Boolean @default(false)
eventsOffered String[]
isAcceptingBookings Boolean @default(true)
isApprovedByAdmin Boolean @default(false)
stripeCustomerId String? // Stripe customer ID for subscription management
stripeConnectAccountId String? // Stripe Connect account ID for payouts
stripeConnectAccountStatus String? // Status of Connect account (pending, active, restricted)
stripeConnectAccountEnabled Boolean @default(false) // Whether Connect account is ready for payouts
stripeConnectAccountCreatedAt DateTime? // When Connect account was created
// Subcontractor fields
contractorType DjContractorType @default(SUBCONTRACTOR)
contractStartDate DateTime?
contractEndDate DateTime?
contractorAgreementSigned Boolean @default(false)
contractorAgreementDate DateTime?
backgroundCheckCompleted Boolean @default(false)
backgroundCheckDate DateTime?
equipmentTrainingCompleted Boolean @default(false)
equipmentTrainingDate DateTime?
prodjBrandingTrainingCompleted Boolean @default(false)
prodjBrandingTrainingDate DateTime?
performanceRating Decimal @default(0) // 0-5 star rating
totalEventsCompleted Int @default(0)
lastActiveDate DateTime?
contractorStatus ContractorStatus @default(PENDING)
// Revenue split - can be customized per contractor (default 70-30)
contractorSplitPercentage Decimal @default(30) // Percentage DJ gets (30%)
platformSplitPercentage Decimal @default(70) // Percentage Pro-DJ gets (70%)
bookings Booking[]
preferredBookings Booking[] @relation("PreferredDjBookings")
adminAssignedBookings Booking[] @relation("AdminAssignedBookings")
recoverySuggestions BookingRecovery[] @relation("SuggestedDj")
djAddons DjAddon[]
djEventPricing DjEventPricing[]
mixes DjMix[]
user User @relation(fields: [userId], references: [id])
youtubeVideos DjYouTubeVideo[]
eventPhotos EventPhoto[]
pricing Pricing[]
reviews Review[]
availability DjAvailability[]
equipmentAssignments EquipmentAssignment[]
performanceMetrics DjPerformanceMetric[]
djPreferences ClientDjPreference[] @relation("DjPreferences")
}

model Review {
id String @id @default(uuid())
bookingId String @unique
djId String
clientId String
rating Int
comment String?
createdAt DateTime @default(now())
booking Booking @relation(fields: [bookingId], references: [id])
client User @relation("UserReviews", fields: [clientId], references: [id])
dj DjProfile @relation(fields: [djId], references: [id])
}

model DjAddon {
id String @id @default(uuid())
djId String
addonKey String
label String
description String?
priceCents Int
isActive Boolean @default(true)
isCustom Boolean @default(false)
customCategory String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dj DjProfile @relation(fields: [djId], references: [id])

@@unique([djId, addonKey])
@@index([djId, isActive])
}

model DjEventPricing {
id String @id @default(uuid())
djId String
eventType String
hourlyRateCents Int
description String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dj DjProfile @relation(fields: [djId], references: [id])

@@unique([djId, eventType])
@@index([djId])
}

model Notification {
id String @id @default(uuid())
userId String
type String
title String
message String
data Json?
isRead Boolean @default(false)
actionUrl String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation("UserNotifications", fields: [userId], references: [id])

@@index([userId, isRead])
@@index([createdAt])
}

model BookingRecovery {
id String @id @default(uuid())
originalBookingId String
recoveryType String
suggestedDjId String?
status String
clientResponse String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
originalBooking Booking @relation("OriginalBooking", fields: [originalBookingId], references: [id])
suggestedDj DjProfile? @relation("SuggestedDj", fields: [suggestedDjId], references: [id])
}

model PaymentMetric {
id String @id @default(uuid())
bookingId String
type String
success Boolean
amount Int
metadata Json?
timestamp DateTime @default(now())

@@index([type, timestamp])
@@index([bookingId])
}

model PaymentAlert {
id String @id @default(uuid())
type String
data Json
timestamp DateTime @default(now())
isResolved Boolean @default(false)
resolvedAt DateTime?
resolvedBy String?

@@index([type, isResolved])
@@index([timestamp])
}

model UserMedia {
id String @id @default(uuid())
userId String
type String
url String
filename String
originalName String
mimeType String
size Int
altText String?
description String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id])

@@index([userId, type])
}

model EventPhoto {
id String @id @default(uuid())
djId String
title String
description String?
url String
filename String
originalName String
mimeType String
size Int
altText String?
eventName String?
eventDate DateTime?
eventType String?
venue String?
location String?
tags String[]
isFeatured Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])

@@index([djId, isFeatured])
@@index([eventType])
}

model DjMix {
id String @id @default(uuid())
djId String
title String
description String?
tags String[]
isPublic Boolean @default(false)
isFeatured Boolean @default(false)
fileName String
originalName String
fileSize Int
duration Int?
bitrate Int?
sampleRate Int?
s3Key String
cloudFrontUrl String?
localUrl String?
uploadStatus UploadStatus @default(PENDING)
uploadProgress Int @default(0)
uploadedAt DateTime?
uploadError String?
playCount Int @default(0)
downloadCount Int @default(0)
lastPlayedAt DateTime?
mimeType String
format String?
quality String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
albumArtS3Key String?
albumArtUrl String?
likeCount Int @default(0)
genres String[]
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])
likes MixLike[]
reposts Repost[]

@@index([djId, isPublic])
@@index([genres])
@@index([uploadStatus])
@@index([isFeatured])
}

model MixLike {
id String @id @default(uuid())
mixId String
userId String
createdAt DateTime @default(now())
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([mixId, userId])
@@index([mixId])
@@index([userId])
}

model DjYouTubeVideo {
id String @id @default(uuid())
djId String
title String
description String?
youtubeUrl String
youtubeId String
thumbnailUrl String?
duration String?
eventType String?
eventDate DateTime?
venue String?
location String?
tags String[]
isFeatured Boolean @default(false)
isPublic Boolean @default(true)
viewCount Int @default(0)
likeCount Int @default(0)
sortOrder Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
comments Comment[]
dj DjProfile @relation(fields: [djId], references: [id])

@@index([djId, isPublic])
@@index([eventType])
@@index([isFeatured])
@@index([sortOrder])
}

model Follow {
id String @id @default(uuid())
followerId String
followingId String
createdAt DateTime @default(now())
follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

@@unique([followerId, followingId])
@@index([followerId])
@@index([followingId])
@@index([createdAt])
}

model Repost {
id String @id @default(uuid())
userId String
mixId String
createdAt DateTime @default(now())
mix DjMix @relation(fields: [mixId], references: [id], onDelete: Cascade)
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId, mixId])
@@index([userId])
@@index([mixId])
@@index([createdAt])
}

model SecurityClearance {
id String @id @default(uuid())
userId String @unique
encryptedTaxId String?
taxIdLastFour String?
taxIdType String?
businessName String?
businessAddress String?
businessPhone String?
isCorporation Boolean @default(false)
isSoleProprietor Boolean @default(true)
businessType String?
lastAccessedAt DateTime?
lastAccessedBy String?
accessCount Int @default(0)
ipAddress String?
isVerified Boolean @default(false)
verifiedAt DateTime?
verifiedBy String?
dataRetentionDate DateTime?
isRetentionSuspended Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId])
@@index([isVerified])
@@index([dataRetentionDate])
}

model DjAvailability {
id String @id @default(uuid())
djId String
dayOfWeek Int // 0=Sunday, 1=Monday, etc.
startTime String // "18:00" format
endTime String // "23:00" format
isAvailable Boolean @default(true)
effectiveDate DateTime @default(now())
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dj DjProfile @relation(fields: [djId], references: [id], onDelete: Cascade)

@@index([djId])
@@index([dayOfWeek])
}

model EquipmentItem {
id String @id @default(uuid())
name String
category String // "Speaker", "Microphone", "Mixer", etc.
brand String?
model String?
serialNumber String?
purchaseDate DateTime?
purchaseCost Decimal?
condition String @default("GOOD") // "EXCELLENT", "GOOD", "FAIR", "NEEDS_REPAIR"
location String? // Storage location
isActive Boolean @default(true)
maintenanceNotes String?
lastMaintenanceDate DateTime?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
assignments EquipmentAssignment[]

@@index([category])
@@index([isActive])
}

model EquipmentAssignment {
id String @id @default(uuid())
equipmentId String
djId String
bookingId String?
assignedDate DateTime @default(now())
returnedDate DateTime?
condition String? // Condition when returned
notes String?
createdAt DateTime @default(now())
equipment EquipmentItem @relation(fields: [equipmentId], references: [id])
dj DjProfile @relation(fields: [djId], references: [id])
booking Booking? @relation(fields: [bookingId], references: [id])

@@index([equipmentId])
@@index([djId])
@@index([bookingId])
@@index([assignedDate])
}

model DjPerformanceMetric {
id String @id @default(uuid())
djId String
bookingId String
clientRating Int? // 1-5 stars
onTimeArrival Boolean?
equipmentFunctional Boolean?
professionalAppearance Boolean?
clientFeedback String?
adminNotes String?
createdAt DateTime @default(now())
dj DjProfile @relation(fields: [djId], references: [id])
booking Booking @relation(fields: [bookingId], references: [id])

@@unique([djId, bookingId])
@@index([djId])
@@index([clientRating])
}

enum Role {
ADMIN
CLIENT
DJ
}

enum BookingStatus {
PENDING_ADMIN_REVIEW
ADMIN_REVIEWING
DJ_ASSIGNED
CONFIRMED
COMPLETED
CANCELLED
DISPUTED
}

enum UserStatus {
ACTIVE
SUSPENDED
PENDING
}

enum UploadStatus {
PENDING
UPLOADING
COMPLETED
FAILED
CANCELLED
}

enum EscrowStatus {
PENDING
HELD
RELEASED
DISPUTED
REFUNDED
}

enum PayoutStatus {
PENDING
PROCESSING
COMPLETED
FAILED
CANCELLED
}

enum DisputeStatus {
NONE
OPEN
RESOLVED
ESCALATED
}

enum DjContractorType {
SUBCONTRACTOR
PREMIUM_SUBCONTRACTOR
TERMINATED
}

enum ContractorStatus {
PENDING
TRAINING
ACTIVE
SUSPENDED
TERMINATED
}

model AdminBookingAction {
id String @id @default(uuid())
bookingId String
adminId String
action String // "APPROVED", "REJECTED", "REASSIGNED", "REVIEWED"
reason String?
previousDjId String?
newDjId String?
createdAt DateTime @default(now())

booking Booking @relation(fields: [bookingId], references: [id])
admin User @relation(fields: [adminId], references: [id])

@@index([bookingId])
@@index([adminId])
@@index([action])
@@index([createdAt])
}

model ClientDjPreference {
id String @id @default(uuid())
clientId String
djId String
preferenceType String // "PREFERRED", "AVOIDED", "NEUTRAL"
reason String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

client User @relation("ClientPreferences", fields: [clientId], references: [id])
dj DjProfile @relation("DjPreferences", fields: [djId], references: [id])

@@unique([clientId, djId])
@@index([clientId])
@@index([djId])
@@index([preferenceType])
}
